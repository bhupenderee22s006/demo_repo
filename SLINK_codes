# clink FSS code using the ksd distance metric

import numpy as np
import math
import sys
def initial_cdf(x1,n):

    cdf_initial = []
    x = np.arange(-5,8,0.1)
    for a in x:
        suma = sum([i < a for i in x1])/n
        cdf_initial.append(suma)
    return cdf_initial
def computeKS_seq(cdfx1,cdfx2,n):
    x = np.arange(-5,8,0.1)
    count = 0
    dsum_updated = []
    for j in x:
        dsum_updated.append(abs(cdfx1[count] - cdfx2[count]))
        count = count + 1
    #print(dsum_updated)
    return max(dsum_updated)

def kernel(x,y):
    x = np.array(x)
    y = np.array(y)
    return np.exp((-(x-y)**2)/2)
#lst = [[0,10,6,5,9],[10,0,8,7,2],[6,8,0,1,4],[5,7,1,0,3],[9,2,4,3,0]]
import random
M = 25      # total number of sequences
Mk = 5      # number of sequences per cluster
K = 5       # number of clusters
Nvec= [30,35,40,45,50,55,60,65,70]     # number of elements in 1 sequence
clusters = [[i] for i in range(M)]
# means = [0.4,0.55,0.7,0.85,1,1.15,1.3,1.45,1.6, 1.85,2,2.15]
means = [i for i in range(K) for j in range(Mk)]
# correct = [[0,1,2,3,4,5,6,7,8],[9,10,11]]
correct = [[(Mk*i)+j for j in range(Mk)]for i in range(K)]
print(means)
print(correct)
# with open('slink-fss-mmdnew100.txt', 'a') as f:
#     print(correct,means, file = f)

Nvec  = [30,35,40,45,50,55,60,65,70]
Pe = np.zeros(len(Nvec))
lnPe=np.zeros(len(Nvec))

for ii in range(len(Nvec)):
    N = Nvec[ii]
    total = 0
    error = 0
    while error < 100:

        clusters = [[i] for i in range(M)]
        total += 1
        lst = [[] for i in range(M)]
        a = [np.random.normal(means[i],1,(1,N)) for i in range(M)]
        y = np.vstack(a)
        lst = [[computeKS(y[i,:],y[j,:],N) for j in range(i+1)] for i in range(M)]

        for i in range(M):
            for j in range(M):
                if i<j:
                    lst[i].append(lst[j][i])
        #print(lst)
        n = 0
        while len(clusters)>K:

            ####    FIND MINIMUM    ####

            #mi = sys.float_info.max
            mi = 100
            for i in range(len(lst)):
                for j in range(i+1):
                    if i != j:
                        if lst[i][j] < mi:
                            mi = lst[i][j]
                            a,b = [i,j]
            #print(a,b)
            clusters[b].extend(clusters[a])
            del clusters[a]
            #print(clusters)

            ####    MERGE ROWS  ####

            for i in range(len(lst[b])):        #merge rows 'a' and 'b'
                if max(lst[a][i],lst[b][i]) != 0:
                    lst[b][i] = max(lst[a][i],lst[b][i])
            del lst[a]

            ####    UPDATE ROWS     ####

            for i in range(len(lst)):       #update all other rows
                if i!=b:
                    lst[i][b] = max(lst[i][a],lst[i][b])
                del lst[i][a]   #new statement

            #print('dist matrix', lst)
            #print('dist matrix 2', dist)
            #print('clusters',clusters)
            # n = n+1

        clusters.sort()
        C_sort = []
        for x in clusters:
            x.sort()
            C_sort.append(x)

        #print(C_sort)
        #print(centers)

        if correct != C_sort:
            error = error + 1
            #print('L')
        #else:
            #print('W')

    Pe[ii] = error/total
    lnPe[ii] = math.log(Pe[ii])
    print(total,Pe[ii],lnPe[ii])

    # with open('slink-fss-ksd.txt', 'a') as f:
    #     print(N,total,lnPe[ii], file = f)